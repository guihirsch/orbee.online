#!/usr/bin/env python3
"""
Script de teste para verificar a integra√ß√£o com Supabase
"""

import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
CURRENT_DIR = Path(__file__).resolve().parent
if str(CURRENT_DIR) not in sys.path:
    sys.path.append(str(CURRENT_DIR))

from app.core.config import settings
from app.core.database import get_supabase_client, get_supabase_service_client, init_db
import asyncio
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_supabase_connection():
    """Testa a conex√£o com o Supabase"""
    print("üîç Testando integra√ß√£o com Supabase...")
    
    # Verificar configura√ß√µes
    print(f"üìã Configura√ß√µes:")
    print(f"   SUPABASE_URL: {'‚úÖ Configurado' if settings.SUPABASE_URL else '‚ùå N√£o configurado'}")
    print(f"   SUPABASE_ANON_KEY: {'‚úÖ Configurado' if settings.SUPABASE_ANON_KEY else '‚ùå N√£o configurado'}")
    print(f"   SUPABASE_SERVICE_ROLE_KEY: {'‚úÖ Configurado' if settings.SUPABASE_SERVICE_ROLE_KEY else '‚ùå N√£o configurado'}")
    
    if not settings.SUPABASE_URL or not settings.SUPABASE_ANON_KEY:
        print("‚ö†Ô∏è  Supabase n√£o configurado - modo desenvolvimento")
        return False
    
    try:
        # Inicializar banco
        await init_db()
        
        # Testar cliente an√¥nimo
        client = get_supabase_client()
        if client is None:
            print("‚ùå Falha ao criar cliente Supabase")
            return False
        
        print("‚úÖ Cliente Supabase (anon) criado com sucesso")
        
        # Testar cliente service role
        service_client = get_supabase_service_client()
        if service_client is None:
            print("‚ö†Ô∏è  Cliente Supabase (service role) n√£o configurado")
        else:
            print("‚úÖ Cliente Supabase (service role) criado com sucesso")
        
        # Teste de conex√£o - tentar buscar dados
        try:
            response = client.table('users').select('id').limit(1).execute()
            print("‚úÖ Conex√£o com Supabase estabelecida com sucesso")
            print(f"   Tabela 'users' acess√≠vel: {len(response.data)} registros encontrados")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao acessar tabela 'users': {e}")
            print("   Isso √© normal se a tabela ainda n√£o foi criada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o com Supabase: {e}")
        return False


async def test_repositories():
    """Testa os reposit√≥rios com Supabase"""
    print("\nüîç Testando reposit√≥rios...")
    
    try:
        from app.repositories.user_repository import UserRepository
        from app.repositories.observation_repository import ObservationRepository
        from app.repositories.validation_repository import ValidationRepository
        
        client = get_supabase_client()
        if client is None:
            print("‚ö†Ô∏è  Cliente Supabase n√£o dispon√≠vel - pulando testes de reposit√≥rios")
            return
        
        # Testar UserRepository
        user_repo = UserRepository(client)
        print("‚úÖ UserRepository inicializado")
        
        # Testar ObservationRepository
        obs_repo = ObservationRepository(client)
        print("‚úÖ ObservationRepository inicializado")
        
        # Testar ValidationRepository
        val_repo = ValidationRepository(client)
        print("‚úÖ ValidationRepository inicializado")
        
        print("‚úÖ Todos os reposit√≥rios inicializados com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro ao testar reposit√≥rios: {e}")


async def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Iniciando testes de integra√ß√£o com Supabase\n")
    
    # Teste de conex√£o
    connection_ok = await test_supabase_connection()
    
    # Teste de reposit√≥rios
    await test_repositories()
    
    print("\n" + "="*50)
    if connection_ok:
        print("‚úÖ Integra√ß√£o com Supabase funcionando corretamente!")
        print("üìù Pr√≥ximos passos:")
        print("   1. Configure as credenciais do Supabase no arquivo .env")
        print("   2. Execute as migra√ß√µes do banco de dados")
        print("   3. Teste os endpoints da API")
    else:
        print("‚ö†Ô∏è  Integra√ß√£o com Supabase n√£o configurada")
        print("üìù Para configurar:")
        print("   1. Crie um projeto no Supabase")
        print("   2. Configure as vari√°veis no arquivo .env")
        print("   3. Execute este script novamente")
    
    print("="*50)


if __name__ == "__main__":
    asyncio.run(main())
